/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from 'ethers';
import type { DelegateSigner, DelegateSignerInterface } from '../DelegateSigner';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'vault',
        type: 'address'
      },
      {
        components: [
          {
            internalType: 'bytes32',
            name: 'brokerHash',
            type: 'bytes32'
          },
          {
            internalType: 'address',
            name: 'delegateSigner',
            type: 'address'
          }
        ],
        internalType: 'struct VaultTypes.VaultDelegate',
        name: 'data',
        type: 'tuple'
      }
    ],
    name: 'delegate',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'to',
        type: 'address'
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256'
      },
      {
        internalType: 'bytes',
        name: 'action',
        type: 'bytes'
      }
    ],
    name: 'execAction',
    outputs: [
      {
        internalType: 'bool',
        name: 'success',
        type: 'bool'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'function'
  }
] as const;

export class DelegateSigner__factory {
  static readonly abi = _abi;
  static createInterface(): DelegateSignerInterface {
    return new Interface(_abi) as DelegateSignerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DelegateSigner {
    return new Contract(address, _abi, runner) as unknown as DelegateSigner;
  }
}
