/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod
} from './common';

export declare namespace VaultTypes {
  export type VaultDelegateStruct = {
    brokerHash: BytesLike;
    delegateSigner: AddressLike;
  };

  export type VaultDelegateStructOutput = [brokerHash: string, delegateSigner: string] & {
    brokerHash: string;
    delegateSigner: string;
  };
}

export interface DelegateSignerInterface extends Interface {
  getFunction(nameOrSignature: 'delegate' | 'execAction'): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'delegate',
    values: [AddressLike, VaultTypes.VaultDelegateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'execAction',
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: 'delegate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'execAction', data: BytesLike): Result;
}

export interface DelegateSigner extends BaseContract {
  connect(runner?: ContractRunner | null): DelegateSigner;
  waitForDeployment(): Promise<this>;

  interface: DelegateSignerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  delegate: TypedContractMethod<
    [vault: AddressLike, data: VaultTypes.VaultDelegateStruct],
    [void],
    'nonpayable'
  >;

  execAction: TypedContractMethod<
    [to: AddressLike, value: BigNumberish, action: BytesLike],
    [boolean],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(
    nameOrSignature: 'delegate'
  ): TypedContractMethod<
    [vault: AddressLike, data: VaultTypes.VaultDelegateStruct],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'execAction'
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish, action: BytesLike],
    [boolean],
    'nonpayable'
  >;

  filters: {};
}
